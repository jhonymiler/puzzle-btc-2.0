<VSCode.Cell language="python">
# PARTE 7: Execu√ß√£o Otimizada para Kaggle (Dual-GPU)

def run_kaggle_optimized():
    """
    Fun√ß√£o otimizada para execu√ß√£o no ambiente Kaggle com 2 GPUs.
    Utiliza paralelismo e estrat√©gias agressivas para maximizar chances de encontrar a chave.
    """
    print("üöÄ Iniciando busca otimizada para ambiente Kaggle (Dual-GPU)...")
    
    # Inicializar dois solvers separados para diferentes estrat√©gias
    # Cada um otimizado para uma GPU diferente
    
    # Solver 1: Foco em algoritmo gen√©tico com popula√ß√£o maior
    genetic_config = {
        'target_address': PUZZLE_71_CONFIG['target_address'],
        'min_range': PUZZLE_71_CONFIG['min_range'],
        'max_range': PUZZLE_71_CONFIG['max_range'],
        'batch_size': PUZZLE_71_CONFIG['batch_size'] // 2,
        'population_size': PUZZLE_71_CONFIG['population_size'] * 2
    }
    
    # Solver 2: Foco em busca multi-estrat√©gia com batch maior
    multi_config = {
        'target_address': PUZZLE_71_CONFIG['target_address'],
        'min_range': PUZZLE_71_CONFIG['min_range'],
        'max_range': PUZZLE_71_CONFIG['max_range'],
        'batch_size': PUZZLE_71_CONFIG['batch_size'] * 2,
        'population_size': PUZZLE_71_CONFIG['population_size'] // 2
    }
    
    # Usando thread pool para executar ambos solvers em paralelo
    with ThreadPoolExecutor(max_workers=2) as executor:
        # Configurar os solvers
        genetic_solver = BitcoinPuzzleSolver(**genetic_config)
        multi_solver = BitcoinPuzzleSolver(**multi_config)
        
        print("üß¨ Iniciando solver gen√©tico na GPU 0...")
        print("üîç Iniciando solver multi-estrat√©gia na GPU 1...")
        
        # Executar buscas em paralelo
        future_genetic = executor.submit(
            genetic_solver.run_genetic_search,
            max_generations=50  # Mais gera√ß√µes para busca gen√©tica
        )
        
        future_multi = executor.submit(
            multi_solver.run_multi_strategy_search,
            num_batches=500,  # Mais lotes para multi-estrat√©gia
            strategies=['adaptive', 'fibonacci', 'quantum_inspired']
        )
        
        # Aguardar qualquer um dos solvers encontrar a chave
        result = None
        while not future_genetic.done() and not future_multi.done():
            time.sleep(1)  # Verificar a cada 1 segundo
            
            if future_genetic.done() and future_genetic.result():
                result = future_genetic.result()
                print("üéØ Solver gen√©tico encontrou a chave!")
                break
                
            if future_multi.done() and future_multi.result():
                result = future_multi.result()
                print("üéØ Solver multi-estrat√©gia encontrou a chave!")
                break
        
        print("\n‚è±Ô∏è Finalizando todos os solvers...")
        
        # Se encontramos a chave, retornar
        if result:
            print(f"\nüéâüéâüéâ CHAVE ENCONTRADA: {result}")
            print(f"üîë Endere√ßo Bitcoin: {PUZZLE_71_CONFIG['target_address']}")
            return result
        
        # Verificar se algum completou mas n√£o encontrou a chave
        if future_genetic.done():
            genetic_result = future_genetic.result()
            if genetic_result:
                print(f"\nüéâüéâüéâ CHAVE ENCONTRADA: {genetic_result}")
                print(f"üîë Endere√ßo Bitcoin: {PUZZLE_71_CONFIG['target_address']}")
                return genetic_result
                
        if future_multi.done():
            multi_result = future_multi.result()
            if multi_result:
                print(f"\nüéâüéâüéâ CHAVE ENCONTRADA: {multi_result}")
                print(f"üîë Endere√ßo Bitcoin: {PUZZLE_71_CONFIG['target_address']}")
                return multi_result
    
    print("\n‚ö†Ô∏è Chave n√£o encontrada. Tente executar novamente.")
    return None

# Verificar se estamos no ambiente Kaggle com GPUs
if IS_KAGGLE and (GPU_COUNT > 1 or FORCE_GPU):
    print(f"üñ•Ô∏è Ambiente Kaggle detectado com {GPU_COUNT} GPUs")
    print("‚ñ∂Ô∏è Iniciando execu√ß√£o otimizada para dual-GPU...")
    result = run_kaggle_optimized()
else:
    print("‚öôÔ∏è Executando em modo padr√£o (n√£o-Kaggle ou single-GPU)...")
    # Usar configura√ß√£o padr√£o j√° executada acima
    pass

print("\n‚úÖ Execu√ß√£o final conclu√≠da!")
</VSCode.Cell>
