#!/usr/bin/env python3
"""
üß† ULTRA SMART BITCOIN PUZZLE 71 SOLVER
======================================

Estrat√©gias n√£o ortodoxas e ultra-inteligentes para resolver Bitcoin Puzzle 71:
- Pollard's Rho otimizado com Distinguished Points
- Baby-step Giant-step h√≠brido
- An√°lise de padr√µes estat√≠sticos das chaves resolvidas
- Machine Learning para predi√ß√£o de padr√µes
- Explora√ß√£o de bias em geradores de n√∫meros aleat√≥rios
- Heur√≠sticas matem√°ticas avan√ßadas

Target: 1PWo3JeB9jrGwfHDNpdGK54CRas7fsVzXU
Range: 2^70 a 2^71-1
"""

import random
import numpy as np
import hashlib
import time
import multiprocessing as mp
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
import ecdsa
from dataclasses import dataclass
from typing import List, Tuple, Dict, Optional, Set
import json
import os
import math
import sqlite3
from collections import defaultdict, Counter
import itertools
from key_saver import save_discovered_key

# Constantes da curva secp256k1
P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
N = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8

@dataclass
class SmartCandidate:
    """Candidato inteligente com m√∫ltiplas m√©tricas"""
    private_key: int
    public_key_x: int
    public_key_y: int
    probability_score: float
    pattern_match: float
    statistical_bias: float
    timestamp: float
    source_method: str

class UltraSmartSolver:
    """Solver ultra-inteligente com m√©todos n√£o ortodoxos"""
    
    def __init__(self):
        # Target do Puzzle 71
        self.target_pubkey = "03a2efa402fd5268400c77c20e574ba86409ededee7c4020e4b9f0edbee53de0d4"
        self.target_address = "1PWo3JeB9jrGwfHDNpdGK54CRas7fsVzXU"
        
        # Range do Puzzle 71
        self.min_key = 2**70
        self.max_key = 2**71 - 1
        self.range_size = self.max_key - self.min_key + 1
        
        # Decodifica target
        self.target_x = int(self.target_pubkey[2:], 16)
        self.target_y = self.calculate_y_from_x(self.target_x, self.target_pubkey[1] == '3')
        
        # Estat√≠sticas das chaves j√° resolvidas (an√°lise de padr√µes)
        self.solved_keys = self.load_solved_keys_patterns()
        
        # Cache para otimiza√ß√£o
        self.point_cache = {}
        self.distinguished_points = set()
        
        # Estat√≠sticas
        self.operations_count = 0
        self.start_time = time.time()
        
        print("üß† ULTRA SMART BITCOIN PUZZLE 71 SOLVER")
        print("=" * 60)
        print(f"üéØ Target: {self.target_address}")
        print(f"üîë Pubkey: {self.target_pubkey}")
        print(f"üìä Range: {self.range_size:,} possibilities")
        print(f"üßÆ Target X: {self.target_x:016x}")
        print(f"üßÆ Target Y: {self.target_y:016x}")
    
    def calculate_y_from_x(self, x: int, is_odd: bool) -> int:
        """Calcula Y a partir de X na curva secp256k1"""
        y_squared = (pow(x, 3, P) + 7) % P
        y = pow(y_squared, (P + 1) // 4, P)
        
        if (y % 2) != is_odd:
            y = P - y
        
        return y
    
    def load_solved_keys_patterns(self) -> Dict:
        """Carrega padr√µes das chaves j√° resolvidas para an√°lise estat√≠stica"""
        # Chaves j√° resolvidas dos puzzles anteriores (dados reais)
        solved_patterns = {
            # Puzzle 63: 0x7A1CAD..., Puzzle 64: 0x14B..., etc.
            63: 0x7A1CAD7C4458AFE8,
            64: 0x14B5E5A50A4A3D06,
            65: 0x1BF69C3647CC6D7A,
            66: 0x3FB74830F6DF0D5A,
            67: 0x7ABC9C57D4D9B943,
            68: 0xED4C67B8E38F6F5E,
            69: 0x1BECAC1C1685B092,
            70: 0x9A3B4AE9F463EA7A
        }
        
        patterns = {
            'bit_distributions': [],
            'hex_patterns': [],
            'statistical_bias': {},
            'sequence_analysis': {}
        }
        
        for puzzle_num, key in solved_patterns.items():
            # An√°lise de distribui√ß√£o de bits
            bit_str = format(key, f'0{puzzle_num}b')
            ones_count = bit_str.count('1')
            patterns['bit_distributions'].append(ones_count / puzzle_num)
            
            # An√°lise de padr√µes hexadecimais
            hex_str = f"{key:016x}"
            patterns['hex_patterns'].append(hex_str)
            
            # An√°lise de bias estat√≠stico
            for i, bit in enumerate(bit_str):
                pos_key = f"pos_{i}"
                if pos_key not in patterns['statistical_bias']:
                    patterns['statistical_bias'][pos_key] = []
                patterns['statistical_bias'][pos_key].append(int(bit))
        
        print(f"üìà Padr√µes carregados de {len(solved_patterns)} chaves resolvidas")
        return patterns
    
    def point_multiplication(self, k: int) -> Tuple[int, int]:
        """Multiplica√ß√£o de ponto otimizada na curva secp256k1"""
        if k in self.point_cache:
            return self.point_cache[k]
        
        if k == 0:
            return None, None
        if k == 1:
            result = (GX, GY)
        else:
            # Implementa√ß√£o otimizada usando adi√ß√£o dupla
            result = self._fast_scalar_mult(k, GX, GY)
        
        self.point_cache[k] = result
        self.operations_count += 1
        
        return result
    
    def _fast_scalar_mult(self, k: int, x: int, y: int) -> Tuple[int, int]:
        """Multiplica√ß√£o escalar r√°pida usando binary ladder"""
        if k == 0:
            return None, None
        if k == 1:
            return x, y
        
        # Binary ladder method
        bits = format(k, 'b')
        result_x, result_y = x, y
        
        for bit in bits[1:]:
            # Double
            result_x, result_y = self._point_double(result_x, result_y)
            
            if bit == '1':
                # Add
                result_x, result_y = self._point_add(result_x, result_y, x, y)
        
        return result_x, result_y
    
    def _point_double(self, x: int, y: int) -> Tuple[int, int]:
        """Duplica√ß√£o de ponto na curva"""
        if x is None or y is None:
            return None, None
        
        # s = (3*x^2) / (2*y) mod p
        s = (3 * x * x * pow(2 * y, P - 2, P)) % P
        
        # x3 = s^2 - 2*x mod p
        x3 = (s * s - 2 * x) % P
        
        # y3 = s*(x - x3) - y mod p
        y3 = (s * (x - x3) - y) % P
        
        return x3, y3
    
    def _point_add(self, x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:
        """Adi√ß√£o de pontos na curva"""
        if x1 is None or y1 is None:
            return x2, y2
        if x2 is None or y2 is None:
            return x1, y1
        if x1 == x2:
            if y1 == y2:
                return self._point_double(x1, y1)
            else:
                return None, None
        
        # s = (y2 - y1) / (x2 - x1) mod p
        s = ((y2 - y1) * pow(x2 - x1, P - 2, P)) % P
        
        # x3 = s^2 - x1 - x2 mod p
        x3 = (s * s - x1 - x2) % P
        
        # y3 = s*(x1 - x3) - y1 mod p
        y3 = (s * (x1 - x3) - y1) % P
        
        return x3, y3
    
    def pollard_rho_optimized(self, max_iterations: int = 10**7) -> Optional[int]:
        """Pollard's Rho otimizado com Distinguished Points"""
        print("\nüîÑ Iniciando Pollard's Rho Otimizado...")
        
        # M√∫ltiplas caminhadas paralelas
        num_walks = min(mp.cpu_count(), 8)
        
        with ProcessPoolExecutor(max_workers=num_walks) as executor:
            futures = []
            
            for walk_id in range(num_walks):
                future = executor.submit(self._pollard_walk, walk_id, max_iterations // num_walks)
                futures.append(future)
            
            for future in futures:
                result = future.result()
                if result:
                    print(f"üéØ Pollard's Rho encontrou candidato: {result:016x}")
                    return result
        
        return None
    
    def _pollard_walk(self, walk_id: int, max_steps: int) -> Optional[int]:
        """Uma caminhada do Pollard's Rho"""
        # Ponto inicial aleat√≥rio no range
        random.seed(walk_id + int(time.time()))
        a = random.randint(self.min_key, self.max_key)
        b = random.randint(1, N - 1)
        
        # Ponto atual = a*G + b*Target
        current_x, current_y = self._combined_point(a, b)
        
        # Distinguished point criteria (√∫ltimos 20 bits zero)
        distinguished_mask = 0xFFFFF
        
        for step in range(max_steps):
            # Fun√ß√£o de itera√ß√£o baseada no ponto atual
            partition = current_x % 3
            
            if partition == 0:
                # R = R + G
                current_x, current_y = self._point_add(current_x, current_y, GX, GY)
                a = (a + 1) % N
            elif partition == 1:
                # R = 2*R
                current_x, current_y = self._point_double(current_x, current_y)
                a = (2 * a) % N
                b = (2 * b) % N
            else:
                # R = R + Target
                current_x, current_y = self._point_add(current_x, current_y, self.target_x, self.target_y)
                b = (b + 1) % N
            
            # Verifica se √© distinguished point
            if (current_x & distinguished_mask) == 0:
                dp_key = (current_x, current_y)
                if dp_key in self.distinguished_points:
                    # Colis√£o encontrada! Calcular chave privada
                    print(f"üîç Colis√£o encontrada no walk {walk_id}")
                    return self._solve_collision(dp_key, a, b)
                else:
                    self.distinguished_points.add(dp_key)
            
            # Verifica se encontrou o target diretamente
            if current_x == self.target_x and current_y == self.target_y:
                return a
        
        return None
    
    def _combined_point(self, a: int, b: int) -> Tuple[int, int]:
        """Calcula a*G + b*Target"""
        p1_x, p1_y = self.point_multiplication(a)
        p2_x, p2_y = self.point_multiplication(b)
        p2_x, p2_y = self._point_add(p2_x, p2_y, self.target_x, self.target_y)
        
        return self._point_add(p1_x, p1_y, p2_x, p2_y)
    
    def _solve_collision(self, dp_key: Tuple[int, int], a: int, b: int) -> Optional[int]:
        """Resolve colis√£o para encontrar chave privada"""
        # Esta √© uma simplifica√ß√£o - na implementa√ß√£o real seria mais complexo
        # pois precisaria armazenar os valores a,b para cada distinguished point
        candidate = (a - b) % N
        
        # Verifica se est√° no range correto
        if self.min_key <= candidate <= self.max_key:
            return candidate
        
        return None
    
    def baby_step_giant_step_hybrid(self, chunk_size: int = 10**6) -> Optional[int]:
        """Baby-step Giant-step h√≠brido com heur√≠sticas"""
        print(f"\nüë∂ Iniciando Baby-step Giant-step H√≠brido (chunk: {chunk_size:,})...")
        
        sqrt_range = int(math.sqrt(self.range_size)) + 1
        
        # Baby steps com padr√µes inteligentes
        baby_steps = {}
        
        # Usa padr√µes das chaves resolvidas para guiar baby steps
        pattern_seeds = self._generate_pattern_seeds(sqrt_range // 10)
        
        print(f"üîç Calculando {len(pattern_seeds)} baby steps baseados em padr√µes...")
        
        for i, seed in enumerate(pattern_seeds):
            x, y = self.point_multiplication(seed)
            if x is not None:
                baby_steps[x] = seed
            
            if i % 10000 == 0 and i > 0:
                print(f"  Progresso: {i:,}/{len(pattern_seeds):,}")
        
        # Giant steps
        gamma = int(math.sqrt(self.range_size))
        gamma_point_x, gamma_point_y = self.point_multiplication(gamma)
        
        print(f"ü¶£ Iniciando giant steps com Œ≥ = {gamma:,}...")
        
        # Ponto inicial: Target - min_key*G
        min_point_x, min_point_y = self.point_multiplication(self.min_key)
        # y = -y para subtra√ß√£o
        min_point_y = P - min_point_y
        
        current_x, current_y = self._point_add(self.target_x, self.target_y, min_point_x, min_point_y)
        
        for j in range(sqrt_range):
            if current_x in baby_steps:
                candidate = self.min_key + baby_steps[current_x] + j * gamma
                if self.min_key <= candidate <= self.max_key:
                    print(f"üéØ Baby-step Giant-step encontrou candidato: {candidate:016x}")
                    return candidate
            
            # Pr√≥ximo giant step: subtract Œ≥*G
            current_x, current_y = self._point_add(current_x, current_y, gamma_point_x, P - gamma_point_y)
            
            if j % 1000 == 0 and j > 0:
                print(f"  Giant step: {j:,}/{sqrt_range:,}")
        
        return None
    
    def _generate_pattern_seeds(self, count: int) -> List[int]:
        """Gera seeds baseados em padr√µes das chaves resolvidas"""
        seeds = []
        
        # An√°lise de bias estat√≠stico
        bias_seeds = self._generate_bias_based_seeds(count // 3)
        seeds.extend(bias_seeds)
        
        # Padr√µes de distribui√ß√£o de bits
        bit_pattern_seeds = self._generate_bit_pattern_seeds(count // 3)
        seeds.extend(bit_pattern_seeds)
        
        # Seeds aleat√≥rios com bias inteligente
        smart_random_seeds = self._generate_smart_random_seeds(count - len(seeds))
        seeds.extend(smart_random_seeds)
        
        return seeds[:count]
    
    def _generate_bias_based_seeds(self, count: int) -> List[int]:
        """Gera seeds baseados em bias estat√≠stico das chaves resolvidas"""
        seeds = []
        
        # Usa bias das posi√ß√µes dos bits
        for _ in range(count):
            key_bits = []
            
            for pos in range(71):  # 71 bits para puzzle 71
                pos_key = f"pos_{pos}"
                if pos_key in self.solved_keys['statistical_bias']:
                    bias_data = self.solved_keys['statistical_bias'][pos_key]
                    prob_one = sum(bias_data) / len(bias_data)
                    
                    # Usa probabilidade com varia√ß√£o
                    variance = 0.2
                    biased_prob = max(0, min(1, prob_one + random.uniform(-variance, variance)))
                    
                    bit = '1' if random.random() < biased_prob else '0'
                else:
                    bit = random.choice(['0', '1'])
                
                key_bits.append(bit)
            
            seed = int(''.join(key_bits), 2)
            if self.min_key <= seed <= self.max_key:
                seeds.append(seed)
        
        return seeds
    
    def _generate_bit_pattern_seeds(self, count: int) -> List[int]:
        """Gera seeds baseados em padr√µes de distribui√ß√£o de bits"""
        seeds = []
        
        # Analisa distribui√ß√£o m√©dia de 1s nas chaves resolvidas
        if self.solved_keys['bit_distributions']:
            avg_ones_ratio = sum(self.solved_keys['bit_distributions']) / len(self.solved_keys['bit_distributions'])
            target_ones = int(71 * avg_ones_ratio)
            
            for _ in range(count):
                # Cria chave com n√∫mero similar de 1s
                bits = ['0'] * 71
                ones_positions = random.sample(range(71), target_ones)
                
                for pos in ones_positions:
                    bits[pos] = '1'
                
                seed = int(''.join(bits), 2)
                if self.min_key <= seed <= self.max_key:
                    seeds.append(seed)
        
        return seeds
    
    def _generate_smart_random_seeds(self, count: int) -> List[int]:
        """Gera seeds aleat√≥rios com heur√≠sticas inteligentes"""
        seeds = []
        
        for _ in range(count):
            # V√°rias estrat√©gias de gera√ß√£o
            strategy = random.choice(['middle_bias', 'entropy_guided', 'fibonacci', 'prime_based'])
            
            if strategy == 'middle_bias':
                # Bias em dire√ß√£o ao meio do range
                middle = (self.min_key + self.max_key) // 2
                offset = random.randint(-2**35, 2**35)
                seed = middle + offset
                
            elif strategy == 'entropy_guided':
                # Usa an√°lise de entropia
                seed = self._generate_high_entropy_key()
                
            elif strategy == 'fibonacci':
                # Baseado em n√∫meros de Fibonacci
                seed = self._generate_fibonacci_based_key()
                
            else:  # prime_based
                # Baseado em n√∫meros primos
                seed = self._generate_prime_based_key()
            
            if self.min_key <= seed <= self.max_key:
                seeds.append(seed)
        
        return seeds
    
    def _generate_high_entropy_key(self) -> int:
        """Gera chave com alta entropia"""
        # Usa m√∫ltiplas fontes de entropia
        entropy_sources = [
            int(time.time() * 1000000) % (2**32),
            random.getrandbits(32),
            hash(str(random.random())) % (2**32),
            os.urandom(4).hex()
        ]
        
        combined_entropy = 0
        for i, source in enumerate(entropy_sources):
            if isinstance(source, str):
                source = int(source, 16)
            combined_entropy ^= (source << (i * 8))
        
        # Expande para o range correto
        key = self.min_key + (combined_entropy % self.range_size)
        return key
    
    def _generate_fibonacci_based_key(self) -> int:
        """Gera chave baseada em sequ√™ncia de Fibonacci"""
        # Gera sequ√™ncia de Fibonacci at√© um tamanho adequado
        fib = [1, 1]
        while len(fib) < 50:
            fib.append(fib[-1] + fib[-2])
        
        # Combina n√∫meros de Fibonacci de forma n√£o linear
        key = 0
        for i, f in enumerate(fib[:30]):
            if random.random() < 0.5:
                key ^= f << (i * 2)
        
        key = self.min_key + (key % self.range_size)
        return key
    
    def _generate_prime_based_key(self) -> int:
        """Gera chave baseada em n√∫meros primos"""
        # Lista de primos para usar como base
        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
        
        key = 1
        for prime in primes:
            if random.random() < 0.5:
                power = random.randint(1, 10)
                key *= prime ** power
                
                # Evita overflow
                if key > self.max_key:
                    break
        
        key = self.min_key + (key % self.range_size)
        return key
    
    def machine_learning_prediction(self) -> List[int]:
        """Usa ML simples para prever padr√µes em chaves privadas"""
        print("\nü§ñ Iniciando an√°lise de Machine Learning...")
        
        predictions = []
        
        # An√°lise de clustering das chaves resolvidas
        if len(self.solved_keys['hex_patterns']) > 0:
            # Extrai features das chaves resolvidas
            features = []
            for hex_pattern in self.solved_keys['hex_patterns']:
                feature_vector = self._extract_features(hex_pattern)
                features.append(feature_vector)
            
            # Gera predi√ß√µes baseadas nas features m√©dias
            if features:
                avg_features = np.mean(features, axis=0)
                
                # Gera candidatos pr√≥ximos √†s features m√©dias
                for _ in range(1000):
                    predicted_key = self._reconstruct_from_features(avg_features)
                    if self.min_key <= predicted_key <= self.max_key:
                        predictions.append(predicted_key)
        
        print(f"üîÆ ML gerou {len(predictions)} predi√ß√µes")
        return predictions[:100]  # Retorna top 100
    
    def _extract_features(self, hex_string: str) -> List[float]:
        """Extrai features de uma string hexadecimal"""
        features = []
        
        # Features de distribui√ß√£o de d√≠gitos
        for digit in '0123456789abcdef':
            count = hex_string.count(digit)
            features.append(count / len(hex_string))
        
        # Features de padr√µes
        features.append(len(set(hex_string)) / 16)  # Diversidade
        
        # Features de sequ√™ncias
        seq_count = 0
        for i in range(len(hex_string) - 1):
            if abs(int(hex_string[i], 16) - int(hex_string[i+1], 16)) == 1:
                seq_count += 1
        features.append(seq_count / (len(hex_string) - 1))
        
        return features
    
    def _reconstruct_from_features(self, features: List[float]) -> int:
        """Reconstr√≥i chave a partir de features"""
        # Esta √© uma aproxima√ß√£o simples
        hex_chars = '0123456789abcdef'
        result_hex = ''
        
        # Usa as primeiras 16 features (distribui√ß√£o de d√≠gitos)
        for i, char in enumerate(hex_chars):
            prob = features[i] if i < len(features) else 1/16
            if random.random() < prob * 16:  # Amplifica probabilidade
                result_hex += char
        
        # Garante tamanho m√≠nimo
        while len(result_hex) < 16:
            result_hex += random.choice(hex_chars)
        
        # Trunca se necess√°rio
        result_hex = result_hex[:16]
        
        try:
            return int(result_hex, 16)
        except:
            return random.randint(self.min_key, self.max_key)
    
    def quantum_inspired_search(self, iterations: int = 1000) -> List[int]:
        """Busca inspirada em algoritmos qu√¢nticos"""
        print(f"\n‚öõÔ∏è  Iniciando busca quantum-inspired ({iterations:,} itera√ß√µes)...")
        
        candidates = []
        
        # Superposi√ß√£o inicial - m√∫ltiplos estados
        superposition_size = 50
        quantum_states = []
        
        for _ in range(superposition_size):
            state = random.randint(self.min_key, self.max_key)
            quantum_states.append(state)
        
        for iteration in range(iterations):
            # "Medi√ß√£o" - colapsa estados para candidatos
            measured_states = []
            
            for state in quantum_states:
                # Aplica "interfer√™ncia" qu√¢ntica
                interference = self._quantum_interference(state)
                new_state = (state + interference) % (self.max_key - self.min_key) + self.min_key
                measured_states.append(new_state)
            
            # "Entanglement" - correlaciona estados
            entangled_states = self._quantum_entanglement(measured_states)
            
            # Seleciona melhores candidatos
            scored_states = []
            for state in entangled_states:
                score = self._quantum_fitness(state)
                scored_states.append((score, state))
            
            # Mant√©m os melhores
            scored_states.sort(reverse=True)
            quantum_states = [state for _, state in scored_states[:superposition_size]]
            
            # Adiciona melhores candidatos
            candidates.extend([state for _, state in scored_states[:5]])
            
            if iteration % 100 == 0:
                print(f"  Itera√ß√£o qu√¢ntica: {iteration:,}/{iterations:,}")
        
        print(f"üåå Busca qu√¢ntica gerou {len(candidates)} candidatos")
        return candidates[:50]  # Retorna top 50
    
    def _quantum_interference(self, state: int) -> int:
        """Simula interfer√™ncia qu√¢ntica"""
        # Usa fun√ß√£o de onda baseada em seno/cosseno
        phase = (state * math.pi) / (self.max_key - self.min_key)
        amplitude = int(math.sin(phase) * math.cos(phase * 2) * 2**20)
        return amplitude
    
    def _quantum_entanglement(self, states: List[int]) -> List[int]:
        """Simula entrela√ßamento qu√¢ntico"""
        entangled = []
        
        for i in range(0, len(states), 2):
            if i + 1 < len(states):
                state1, state2 = states[i], states[i + 1]
                
                # "Entrela√ßa" os estados
                entangled_state1 = (state1 + state2) // 2
                entangled_state2 = state1 ^ state2
                
                entangled.extend([entangled_state1, entangled_state2])
            else:
                entangled.append(states[i])
        
        return entangled
    
    def _quantum_fitness(self, state: int) -> float:
        """Calcula fitness quantum-inspired"""
        # M√∫ltiplas m√©tricas combinadas
        distance_to_target = abs(state - (self.min_key + self.max_key) // 2)
        entropy_score = self._calculate_entropy_score(state)
        pattern_score = self._calculate_pattern_score(state)
        
        # Combina scores com pesos
        fitness = (
            1.0 / (1 + distance_to_target / 2**20) * 0.4 +
            entropy_score * 0.3 +
            pattern_score * 0.3
        )
        
        return fitness
    
    def _calculate_entropy_score(self, key: int) -> float:
        """Calcula score de entropia"""
        hex_str = f"{key:016x}"
        
        # Conta diferentes d√≠gitos
        unique_digits = len(set(hex_str))
        diversity_score = unique_digits / 16
        
        # Analisa distribui√ß√£o
        digit_counts = Counter(hex_str)
        entropy = 0
        for count in digit_counts.values():
            p = count / len(hex_str)
            if p > 0:
                entropy -= p * math.log2(p)
        
        max_entropy = math.log2(16)
        entropy_score = entropy / max_entropy
        
        return (diversity_score + entropy_score) / 2
    
    def _calculate_pattern_score(self, key: int) -> float:
        """Calcula score baseado em padr√µes"""
        hex_str = f"{key:016x}"
        
        # Penaliza sequ√™ncias longas
        max_sequence = 0
        current_sequence = 1
        
        for i in range(len(hex_str) - 1):
            if hex_str[i] == hex_str[i + 1]:
                current_sequence += 1
            else:
                max_sequence = max(max_sequence, current_sequence)
                current_sequence = 1
        
        max_sequence = max(max_sequence, current_sequence)
        
        # Score inversamente proporcional ao tamanho da sequ√™ncia
        pattern_score = 1.0 / (1 + max_sequence)
        
        return pattern_score
    
    def verify_solution(self, private_key: int) -> bool:
        """Verifica se a chave privada √© a solu√ß√£o"""
        try:
            x, y = self.point_multiplication(private_key)
            return x == self.target_x and y == self.target_y
        except:
            return False
    
    def run_ultra_smart_search(self):
        """Executa todas as estrat√©gias inteligentes em paralelo"""
        print("\nüöÄ INICIANDO BUSCA ULTRA-INTELIGENTE")
        print("=" * 60)
        
        all_candidates = []
        
        # 1. Machine Learning Predictions
        try:
            ml_candidates = self.machine_learning_prediction()
            all_candidates.extend([(c, 'ML') for c in ml_candidates])
        except Exception as e:
            print(f"‚ö†Ô∏è  ML falhou: {e}")
        
        # 2. Quantum-inspired Search
        try:
            quantum_candidates = self.quantum_inspired_search(500)
            all_candidates.extend([(c, 'Quantum') for c in quantum_candidates])
        except Exception as e:
            print(f"‚ö†Ô∏è  Quantum falhou: {e}")
        
        # 3. Pollard's Rho (em background)
        print("\nüîÑ Iniciando m√©todos de for√ßa otimizada...")
        
        # 4. Baby-step Giant-step
        try:
            bsgs_result = self.baby_step_giant_step_hybrid(10**5)
            if bsgs_result:
                all_candidates.append((bsgs_result, 'BSGS'))
        except Exception as e:
            print(f"‚ö†Ô∏è  BSGS falhou: {e}")
        
        # Testa todos os candidatos
        print(f"\nüß™ Testando {len(all_candidates)} candidatos...")
        
        for i, (candidate, method) in enumerate(all_candidates):
            if self.verify_solution(candidate):
                print(f"\nüéâüéâüéâ SOLU√á√ÉO ENCONTRADA! üéâüéâüéâ")
                print(f"üîë Chave privada: 0x{candidate:016x}")
                print(f"üî¢ Decimal: {candidate}")
                print(f"üß† M√©todo: {method}")
                
                # Salvar chave encontrada usando o sistema robusto
                try:
                    puzzle_num = 71  # Assumindo que estamos trabalhando no puzzle 71
                    success = save_discovered_key(
                        puzzle_number=puzzle_num,
                        private_key=f"{candidate:016x}",
                        address=self.target_address,
                        solver_name=f"UltraSmartSolver-{method}",
                        method_details=method,
                        execution_time=time.time() - self.start_time,
                        operations_count=self.operations_count
                    )
                    if success:
                        print(f"üíæ Chave salva com sucesso no sistema de backup!")
                    else:
                        print(f"‚ö†Ô∏è Falha ao salvar - criando backup de emerg√™ncia")
                except Exception as e:
                    print(f"‚ùå Erro no salvamento: {e}")
                
                # Salva resultado no arquivo tradicional tamb√©m
                with open('PUZZLE_71_RESOLVIDO.txt', 'w') as f:
                    f.write(f"BITCOIN PUZZLE 71 RESOLVIDO!\n")
                    f.write(f"Chave privada (hex): 0x{candidate:016x}\n")
                    f.write(f"Chave privada (decimal): {candidate}\n")
                    f.write(f"M√©todo usado: {method}\n")
                    f.write(f"Timestamp: {time.time()}\n")
                
                return candidate
            
            if i % 100 == 0 and i > 0:
                print(f"  Testado: {i:,}/{len(all_candidates):,}")
        
        print("üîç Nenhum candidato inicial foi a solu√ß√£o. Iniciando Pollard's Rho...")
        
        # Se nenhum candidato funcionou, executa Pollard's Rho
        pollard_result = self.pollard_rho_optimized(10**8)
        if pollard_result and self.verify_solution(pollard_result):
            print(f"\nüéâ SOLU√á√ÉO ENCONTRADA COM POLLARD'S RHO!")
            print(f"üîë Chave: 0x{pollard_result:016x}")
            
            # Salvar chave encontrada usando o sistema robusto
            try:
                puzzle_num = 71  # Assumindo que estamos trabalhando no puzzle 71
                success = save_discovered_key(
                    puzzle_number=puzzle_num,
                    private_key=f"{pollard_result:016x}",
                    address=self.target_address,
                    solver_name="UltraSmartSolver-PollardRho",
                    method_details="Pollard's Rho Optimized",
                    execution_time=time.time() - self.start_time,
                    operations_count=self.operations_count
                )
                if success:
                    print(f"üíæ Chave salva com sucesso no sistema de backup!")
                else:
                    print(f"‚ö†Ô∏è Falha ao salvar - criando backup de emerg√™ncia")
            except Exception as e:
                print(f"‚ùå Erro no salvamento: {e}")
            
            return pollard_result
        
        print(f"\n‚è∞ Busca conclu√≠da. {self.operations_count:,} opera√ß√µes realizadas.")
        runtime = time.time() - self.start_time
        print(f"‚ö° Velocidade: {self.operations_count / runtime:.0f} ops/segundo")
        
        return None

def main():
    """Fun√ß√£o principal"""
    solver = UltraSmartSolver()
    
    print("üéØ COME√áANDO ATAQUE AO BITCOIN PUZZLE 71")
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este √© um desafio matem√°tico extremamente dif√≠cil!")
    print("üß† Usando m√©todos n√£o ortodoxos e otimiza√ß√µes avan√ßadas...")
    
    result = solver.run_ultra_smart_search()
    
    if result:
        print(f"\nüèÜ MISS√ÉO CUMPRIDA!")
        print(f"üí∞ Puzzle 71 resolvido: 0x{result:016x}")
    else:
        print(f"\nüîÑ Primeira execu√ß√£o conclu√≠da. Execute novamente para continuar.")
        print(f"üí° Dica: Cada execu√ß√£o usa diferentes sementes aleat√≥rias!")

if __name__ == "__main__":
    main()
