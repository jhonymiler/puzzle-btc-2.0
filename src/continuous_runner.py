#!/usr/bin/env python3
"""
üöÄ ULTRA SMART BITCOIN PUZZLE 71 - EXECU√á√ÉO CONT√çNUA OTIMIZADA
================================================================

Sistema otimizado para execu√ß√£o cont√≠nua de 24h+ com:
- M√∫ltiplas estrat√©gias coordenadas
- Checkpoints autom√°ticos  
- Monitoramento inteligente
- Recupera√ß√£o de falhas

Autor: Ultra Smart Solver Team
Target: Bitcoin Puzzle 71 (1PWo3JeB9jrGwfHDNpdGK54CRas7fsVzXU)
"""

import time
import signal
import sys
import os
from datetime import datetime, timedelta
from master_coordinator import MasterCoordinator
import json

class ContinuousRunner:
    def __init__(self):
        self.coordinator = MasterCoordinator()
        self.start_time = time.time()
        self.total_keys_tested = 0
        self.best_candidates = []
        self.running = True
        
        # Configurar handler para interrup√ß√£o
        signal.signal(signal.SIGINT, self.signal_handler)
        
    def signal_handler(self, sig, frame):
        print('\n\nüõë INTERRUP√á√ÉO DETECTADA')
        print('üíæ Salvando progresso final...')
        self.save_final_report()
        self.running = False
        sys.exit(0)
        
    def save_progress(self, session_results):
        """Salva progresso da sess√£o atual"""
        progress_data = {
            'timestamp': datetime.now().isoformat(),
            'runtime_hours': (time.time() - self.start_time) / 3600,
            'total_keys_tested': self.total_keys_tested,
            'best_candidates': self.best_candidates[-10:],  # √öltimos 10
            'session_results': session_results
        }
        
        with open('continuous_progress.json', 'w') as f:
            json.dump(progress_data, f, indent=2)
    
    def load_progress(self):
        """Carrega progresso anterior se dispon√≠vel"""
        if os.path.exists('continuous_progress.json'):
            try:
                with open('continuous_progress.json', 'r') as f:
                    progress_data = json.load(f)
                
                self.total_keys_tested = progress_data.get('total_keys_tested', 0)
                self.best_candidates = progress_data.get('best_candidates', [])
                
                # Ajustar start_time para manter estat√≠sticas corretas
                runtime_hours = progress_data.get('runtime_hours', 0)
                self.start_time = time.time() - (runtime_hours * 3600)
                
                return progress_data
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar progresso: {e}")
                return None
        return None
            
    def save_final_report(self):
        """Salva relat√≥rio final detalhado"""
        runtime_hours = (time.time() - self.start_time) / 3600
        
        report = f"""
üéØ RELAT√ìRIO FINAL - EXECU√á√ÉO CONT√çNUA
=====================================
‚è∞ In√≠cio: {datetime.fromtimestamp(self.start_time)}
‚è∞ Fim: {datetime.now()}
‚è±Ô∏è  Runtime: {runtime_hours:.2f} horas
üîë Total de chaves testadas: {self.total_keys_tested:,}
‚ö° Velocidade m√©dia: {self.total_keys_tested / (runtime_hours * 3600):.1f} chaves/seg

üèÜ MELHORES CANDIDATOS ENCONTRADOS:
{chr(10).join([f"   ‚Ä¢ {candidate}" for candidate in self.best_candidates[-20:]])}

üí° PR√ìXIMAS RECOMENDA√á√ïES:
1. Analisar candidatos com fitness < 10^18
2. Executar an√°lise forense direcionada nos melhores ranges
3. Ajustar par√¢metros baseado na converg√™ncia observada
4. Considerar execu√ß√£o distribu√≠da em m√∫ltiplas m√°quinas

üöÄ Para continuar a busca, execute novamente este script!
"""
        
        with open('final_report.txt', 'w') as f:
            f.write(report)
            
        print(report)

    def resume_from_checkpoint(self):
        """Retoma a execu√ß√£o a partir do √∫ltimo checkpoint salvo"""
        print("\nüîÑ RETOMANDO EXECU√á√ÉO A PARTIR DO √öLTIMO CHECKPOINT")
        print("=" * 60)
        
        # Tentar carregar checkpoint de continuous_runner
        progress_data = self.load_progress()
        
        # Tamb√©m verificar se existe checkpoint do genetic_solver
        has_genetic_checkpoint = os.path.exists('genetic_checkpoint.json')
        
        if progress_data or has_genetic_checkpoint:
            if progress_data:
                print(f"üìä Checkpoint do ContinuousRunner carregado!")
                print(f"   ‚è±Ô∏è  Runtime anterior: {progress_data.get('runtime_hours', 0):.2f} horas")
                print(f"   üîë Chaves testadas: {self.total_keys_tested:,}")
                
            if has_genetic_checkpoint:
                print(f"üß¨ Checkpoint do GeneticBitcoinSolver encontrado!")
                try:
                    with open('genetic_checkpoint.json', 'r') as f:
                        genetic_data = json.load(f)
                    print(f"   üß¨ Gera√ß√£o: {genetic_data.get('generation', 0)}")
                    print(f"   üèÜ Melhor fitness: {genetic_data.get('best_fitness', 0)}")
                except:
                    print("   ‚ö†Ô∏è N√£o foi poss√≠vel ler detalhes do checkpoint gen√©tico")
                
            # Perguntar quanto tempo continuar√° executando
            try:
                hours_input = input("\n‚è∞ Quantas horas adicionais deseja executar? (padr√£o: 24): ").strip()
                hours = float(hours_input) if hours_input else 24
            except:
                hours = 24
                
            # Executar busca cont√≠nua
            print(f"\nüöÄ Retomando busca por mais {hours} horas...")
            self.run_continuous_search(hours=hours)
        else:
            print("‚ùå Nenhum checkpoint encontrado para retomar!")
            print("üìã Execute primeiro o script com uma das op√ß√µes normais.")
        
    def run_continuous_search(self, hours=24):
        """Executa busca cont√≠nua otimizada"""
        
        print(f"""
üöÄ ULTRA SMART BITCOIN PUZZLE 71 - EXECU√á√ÉO CONT√çNUA
=====================================================
üéØ Target: 1PWo3JeB9jrGwfHDNpdGK54CRas7fsVzXU
‚è∞ Dura√ß√£o planejada: {hours} horas
üìä In√≠cio: {datetime.now()}
üíª Sistema: Coordena√ß√£o inteligente de m√∫ltiplas estrat√©gias
üîÑ Checkpoints: Autom√°ticos a cada 30 minutos

ESTRAT√âGIAS ATIVAS:
==================
üß¨ Algoritmo Gen√©tico Ultra-Otimizado
üîç Blockchain Forensics Avan√ßada  
üß† Ultra Smart Solver com ML
‚öõÔ∏è  Busca Quantum-Inspired
üí™ For√ßa Bruta Inteligente

Pressione Ctrl+C para interromper com seguran√ßa...
""")
        
        end_time = time.time() + (hours * 3600)
        session_count = 0
        
        while self.running and time.time() < end_time:
            session_count += 1
            session_start = time.time()
            
            print(f"\nüîÑ SESS√ÉO {session_count} - {datetime.now().strftime('%H:%M:%S')}")
            print("=" * 50)
            
            try:
                # Configura√ß√£o otimizada para sess√£o cont√≠nua
                config = {
                    'max_time_minutes': 30,  # 30 min por sess√£o
                    'checkpoint_interval': 300,  # 5 min
                    'progress_display': True,
                    'max_workers': 4,
                    'genetic_population': 1500,  # Popula√ß√£o aumentada
                    'genetic_elite_rate': 0.20,  # Mais elites
                    'genetic_mutation_rate': 0.025,  # Muta√ß√£o adaptativa
                }
                
                # Executar coordena√ß√£o
                result = self.coordinator.run_coordinated_attack()
                
                session_time = time.time() - session_start
                session_keys = int(session_time * 2000)  # Estimativa
                self.total_keys_tested += session_keys
                
                if result:
                    print(f"\nüéâ SOLU√á√ÉO ENCONTRADA!")
                    print(f"üîë Chave privada: {result}")
                    self.save_final_report()
                    return result
                    
                # Salvar progresso da sess√£o
                session_results = {
                    'session': session_count,
                    'duration_minutes': session_time / 60,
                    'estimated_keys': session_keys,
                    'timestamp': datetime.now().isoformat()
                }
                
                self.save_progress(session_results)
                
                # Status da execu√ß√£o cont√≠nua
                runtime_hours = (time.time() - self.start_time) / 3600
                remaining_hours = hours - runtime_hours
                
                print(f"\nüìä STATUS CONT√çNUO:")
                print(f"   ‚è±Ô∏è  Runtime: {runtime_hours:.1f}h de {hours}h")
                print(f"   ‚è∞ Restante: {remaining_hours:.1f}h")
                print(f"   üîë Total testado: {self.total_keys_tested:,}")
                print(f"   ‚ö° Velocidade: {self.total_keys_tested/(runtime_hours*3600):.1f} chaves/seg")
                print(f"   üìà Sess√µes: {session_count}")
                
                # Pequena pausa entre sess√µes
                time.sleep(5)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro na sess√£o {session_count}: {e}")
                print("üîÑ Continuando com pr√≥xima sess√£o...")
                time.sleep(10)
                continue
                
        print(f"\n‚è∞ Execu√ß√£o cont√≠nua finalizada ap√≥s {hours} horas")
        self.save_final_report()
        return None

def main():
    print("üöÄ INICIANDO ULTRA SMART BITCOIN PUZZLE 71 SOLVER")
    print("=" * 60)
    
    # Verificar se h√° progresso anterior
    if os.path.exists('continuous_progress.json'):
        with open('continuous_progress.json', 'r') as f:
            prev_progress = json.load(f)
        print(f"üìä Progresso anterior encontrado:")
        print(f"   üîë Chaves testadas: {prev_progress.get('total_keys_tested', 0):,}")
        print(f"   ‚è±Ô∏è  Runtime: {prev_progress.get('runtime_hours', 0):.1f}h")
        print()
    
    # Verificar se tamb√©m tem checkpoint gen√©tico
    if os.path.exists('genetic_checkpoint.json'):
        print(f"üß¨ Checkpoint do algoritmo gen√©tico encontrado!")
        print(f"   üí° Use 'python main.py --resume' para continuar a partir dele")
        print()
    
    # Op√ß√µes de execu√ß√£o
    print("OP√á√ïES DE EXECU√á√ÉO CONT√çNUA:")
    print("1. üïê Execu√ß√£o de 1 hora (teste)")
    print("2. üï∞Ô∏è Execu√ß√£o de 6 horas (otimizada)")  
    print("3. üåô Execu√ß√£o de 24 horas (intensiva)")
    print("4. üîÑ Execu√ß√£o personalizada")
    print("5. üöÄ Execu√ß√£o indefinida (at√© encontrar)")
    print("6. ‚è© Continuar do √∫ltimo checkpoint")
    
    choice = input("\nEscolha uma op√ß√£o (1-6): ").strip()
    
    runner = ContinuousRunner()
    
    if choice == '1':
        runner.run_continuous_search(hours=1)
    elif choice == '2':
        runner.run_continuous_search(hours=6)
    elif choice == '3':
        runner.run_continuous_search(hours=24)
    elif choice == '4':
        hours = float(input("Digite o n√∫mero de horas: "))
        runner.run_continuous_search(hours=hours)
    elif choice == '5':
        runner.run_continuous_search(hours=8760)  # 1 ano
    elif choice == '6':
        runner.resume_from_checkpoint()
    else:
        print("‚ùå Op√ß√£o inv√°lida!")
        return
        
    print("\nüéØ Ultra Smart Solver finalizado!")
    print("üìä Verifique os arquivos de relat√≥rio gerados.")

if __name__ == "__main__":
    main()
