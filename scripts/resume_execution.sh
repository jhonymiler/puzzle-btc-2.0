#!/usr/bin/env bash
# Script para resumir rapidamente uma execu√ß√£o a partir do √∫ltimo checkpoint
# Vers√£o 2.0 - Com detec√ß√£o de ambiente e acelera√ß√£o

# Caminho base do projeto
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
cd "$PROJECT_DIR"

echo "üîß Verificando ambiente de execu√ß√£o..."

# Verifica disponibilidade de GPU
has_nvidia_gpu=false
has_amd_gpu=false
has_apple_silicon=false

# Verifica NVIDIA
if command -v nvidia-smi &> /dev/null; then
    has_nvidia_gpu=true
    gpu_info=$(nvidia-smi --query-gpu=name,memory.total --format=csv,noheader | head -n 1)
    echo "  ‚úÖ GPU NVIDIA detectada: ${gpu_info}"
# Verifica AMD
elif command -v rocminfo &> /dev/null; then
    has_amd_gpu=true
    echo "  ‚úÖ GPU AMD detectada"
# Verifica Apple Silicon
elif [ "$(uname)" == "Darwin" ] && [[ "$(uname -m)" == "arm64" ]]; then
    has_apple_silicon=true
    echo "  ‚úÖ Apple Silicon detectado"
else
    echo "  ‚ö†Ô∏è Nenhuma GPU detectada, usando apenas CPU"
fi

# Verifica RAM dispon√≠vel
total_ram=$(free -g | awk '/^Mem:/{print $2}')
echo "  üìä RAM dispon√≠vel: ${total_ram}GB"

# Verifica n√∫cleos de CPU
cpu_cores=$(nproc)
echo "  üíª N√∫cleos de CPU: ${cpu_cores}"

echo ""
echo "üîÑ Verificando checkpoints dispon√≠veis..."

# Verifica se existem checkpoints
has_genetic_checkpoint=false
has_continuous_checkpoint=false
has_master_checkpoint=false

# Encontra o checkpoint gen√©tico mais recente
latest_genetic_checkpoint="genetic_checkpoint.json"
if [ -f "$latest_genetic_checkpoint" ]; then
    has_genetic_checkpoint=true
    genetic_timestamp=$(stat -c %y "$latest_genetic_checkpoint")
    
    # Verifica se h√° backups mais recentes
    backup_checkpoints=$(ls -t checkpoint_gen*.json 2>/dev/null | head -n 1)
    if [ ! -z "$backup_checkpoints" ]; then
        backup_timestamp=$(stat -c %y "$backup_checkpoints")
        echo "  ‚úÖ Checkpoint gen√©tico encontrado (${genetic_timestamp})"
        echo "  üíæ Backup de checkpoint encontrado: ${backup_checkpoints} (${backup_timestamp})"
    else
        echo "  ‚úÖ Checkpoint gen√©tico encontrado (${genetic_timestamp})"
    fi
else
    echo "  ‚ùå Nenhum checkpoint gen√©tico encontrado"
fi

if [ -f "continuous_progress.json" ]; then
    has_continuous_checkpoint=true
    continuous_timestamp=$(stat -c %y "continuous_progress.json")
    echo "  ‚úÖ Checkpoint de execu√ß√£o cont√≠nua encontrado (${continuous_timestamp})"
else
    echo "  ‚ùå Nenhum checkpoint de execu√ß√£o cont√≠nua encontrado"
fi

if [ -f "master_progress.json" ]; then
    has_master_checkpoint=true
    master_timestamp=$(stat -c %y "master_progress.json")
    echo "  ‚úÖ Checkpoint do coordenador mestre encontrado (${master_timestamp})"
else
    echo "  ‚ùå Nenhum checkpoint do coordenador mestre encontrado"
fi

echo ""

# Verifica se pelo menos um checkpoint foi encontrado
if $has_genetic_checkpoint || $has_continuous_checkpoint || $has_master_checkpoint; then
    echo "üí° Checkpoints dispon√≠veis! Escolha como retomar a execu√ß√£o:"
    echo "  1. Retomar com execu√ß√£o otimizada para GPU (recomendado se dispon√≠vel)"
    echo "  2. Retomar com execu√ß√£o cont√≠nua padr√£o"
    echo "  3. Retomar com coordenador mestre"
    echo "  4. Executar em modo teste (30 minutos)"
    echo "  5. Verificar integridade do checkpoint"
    echo "  6. Cancelar"
    
    read -p "Escolha uma op√ß√£o (1-6): " option
    
    case $option in
        1)
            if $has_nvidia_gpu || $has_amd_gpu || $has_apple_silicon; then
                echo "üöÄ Retomando com acelera√ß√£o GPU otimizada..."
                # Verifica ou cria um ambiente virtual Python se n√£o existir
                if [ ! -d "venv" ]; then
                    echo "üîß Configurando ambiente Python para GPU..."
                    python3 -m venv venv
                    source venv/bin/activate
                    
                    # Instala depend√™ncias espec√≠ficas para GPU
                    if $has_nvidia_gpu; then
                        echo "üîß Instalando pacotes para NVIDIA GPU..."
                        pip install -r requirements.txt
                        pip install torch==2.0.0+cu118 -f https://download.pytorch.org/whl/torch_stable.html
                    elif $has_amd_gpu; then
                        echo "üîß Instalando pacotes para AMD GPU..."
                        pip install -r requirements.txt
                        pip install torch==2.0.0 -f https://download.pytorch.org/whl/rocm5.2/torch_stable.html
                    elif $has_apple_silicon; then
                        echo "üîß Instalando pacotes para Apple Silicon..."
                        pip install -r requirements.txt
                        pip install torch
                    fi
                else
                    source venv/bin/activate
                fi
                
                # Executa com otimiza√ß√£o para GPU
                python3 src/genetic_bitcoin_solver.py
            else
                echo "‚ö†Ô∏è Nenhuma GPU detectada, usando modo padr√£o..."
                python3 main.py --resume
            fi
            ;;
        2)
            echo "üöÄ Retomando com execu√ß√£o cont√≠nua..."
            python3 main.py --resume
            ;;
        3)
            echo "üöÄ Retomando com coordenador mestre..."
            python3 main.py --master
            ;;
        4)
            echo "üöÄ Executando em modo teste por 30 minutos..."
            cd "$PROJECT_DIR"
            python3 src/continuous_runner.py <<< "4
0.5"  # Responde √†s perguntas do script para executar por 30 minutos (0.5h)
            ;;
        5)
            echo "üîç Verificando integridade do checkpoint..."
            python3 -c "
import json
try:
    with open('genetic_checkpoint.json') as f:
        data = json.load(f)
    print('‚úÖ Checkpoint v√°lido com {} indiv√≠duos em popula√ß√£o'.format(len(data.get('population', []))))
    print('üìä Melhor fitness: {:.2f}'.format(data.get('best_fitness', 0)))
    print('üß¨ Gera√ß√£o: {}'.format(data.get('generation', 0)))
except Exception as e:
    print('‚ùå Erro ao validar checkpoint: {}'.format(e))
"
            ;;
        6)
            echo "‚ùå Opera√ß√£o cancelada."
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida. Execute o script novamente."
            ;;
    esac
else
    echo "‚ùå Nenhum checkpoint encontrado para retomar execu√ß√£o."
    echo "üí° Execute primeiro o algoritmo gen√©tico para criar um checkpoint:"
    echo ""
    echo "    python3 src/genetic_bitcoin_solver.py      # Execu√ß√£o direta otimizada"
    echo "    python3 main.py --continuous              # Execu√ß√£o cont√≠nua com retomada"
    
    if $has_nvidia_gpu || $has_amd_gpu || $has_apple_silicon; then
        echo ""
        echo "üí° Detec√ß√£o de GPU: Voc√™ pode executar uma vers√£o otimizada para GPU:"
        echo ""
        echo "    1. Executar solver com otimiza√ß√£o GPU"
        echo "    2. Cancelar"
        
        read -p "Escolha uma op√ß√£o (1-2): " gpu_option
        
        if [ "$gpu_option" == "1" ]; then
            echo "üöÄ Iniciando execu√ß√£o otimizada para GPU..."
            python3 src/genetic_bitcoin_solver.py
        fi
    fi
fi
