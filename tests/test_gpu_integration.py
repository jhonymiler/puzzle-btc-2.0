#!/usr/bin/env python3
"""
üöÄ TESTE DE INTEGRA√á√ÉO DOS KERNELS GPU
=====================================

Este script testa a integra√ß√£o entre o solucionador gen√©tico e os kernels GPU,
verificando se as otimiza√ß√µes GPU funcionam corretamente quando dispon√≠veis.
"""

import os
import sys
import time
import random
import argparse
import numpy as np

# Adiciona o diret√≥rio src ao path para importa√ß√£o
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.environment_detector import get_environment_detector
from src.gpu_kernels import get_gpu_kernels
from src.genetic_bitcoin_solver import GeneticBitcoinSolver

def test_environment_settings():
    """Testa configura√ß√µes do ambiente e disponibilidade de GPU"""
    print("\nüß™ TESTE DE CONFIGURA√á√ïES DE AMBIENTE")
    print("=" * 50)
    
    # Detecta ambiente
    env_detector = get_environment_detector()
    
    # Imprime informa√ß√µes sobre GPU
    print(f"GPU NVIDIA: {'‚úì' if env_detector.cuda_available else '‚úó'}")
    print(f"GPU AMD: {'‚úì' if env_detector.rocm_available else '‚úó'}")
    print(f"GPU Apple: {'‚úì' if env_detector.mps_available else '‚úó'}")
    
    # Imprime par√¢metros otimizados
    genetic_params = env_detector.get_optimal_genetic_params(difficulty_level=71)
    print("\nPar√¢metros gen√©ticos otimizados:")
    print(f"- Popula√ß√£o: {genetic_params.get('population_size', 'N/A')}")
    print(f"- Taxa de muta√ß√£o: {genetic_params.get('mutation_rate', 'N/A')}")
    print(f"- Taxa de crossover: {genetic_params.get('crossover_rate', 'N/A')}")
    
    return env_detector

def test_gpu_kernels_integration(env_detector):
    """Testa inicializa√ß√£o e integra√ß√£o dos kernels GPU"""
    print("\nüß™ TESTE DE INTEGRA√á√ÉO DOS KERNELS GPU")
    print("=" * 50)
    
    # Obt√©m inst√¢ncia dos kernels GPU
    start_time = time.time()
    gpu_kernels = get_gpu_kernels(env_detector)
    init_time = time.time() - start_time
    
    print(f"Tempo para inicializa√ß√£o dos kernels: {init_time:.4f}s")
    print(f"Tipo de acelera√ß√£o: {gpu_kernels.device}")
    print(f"GPU dispon√≠vel: {'Sim' if gpu_kernels.has_gpu else 'N√£o'}")
    print(f"M√≥dulos acelerados: {'Carregados' if gpu_kernels.accelerated_modules_loaded else 'N√£o dispon√≠veis'}")
    
    return gpu_kernels

def test_genetic_solver_with_gpu(env_detector, population_size=100):
    """Testa integra√ß√£o do solucionador gen√©tico com kernels GPU"""
    print("\nüß™ TESTE DO SOLUCIONADOR GEN√âTICO COM GPU")
    print("=" * 50)
    
    # Inicializa o solucionador gen√©tico
    start_time = time.time()
    solver = GeneticBitcoinSolver(population_size=population_size)
    init_time = time.time() - start_time
    
    print(f"Tempo para inicializa√ß√£o do solver: {init_time:.4f}s")
    print(f"GPU dispon√≠vel para o solver: {'Sim' if solver.gpu_available else 'N√£o'}")
    
    if solver.gpu_available:
        print(f"Kernels GPU inicializados: {'Sim' if hasattr(solver, 'gpu_kernels') and solver.gpu_kernels is not None else 'N√£o'}")
    
    # Testa inicializa√ß√£o da popula√ß√£o (usa kernels GPU se dispon√≠veis)
    print("\nInicializando popula√ß√£o do algoritmo gen√©tico...")
    start_time = time.time()
    population = solver.initialize_population()
    init_time = time.time() - start_time
    
    print(f"Tempo para inicializar popula√ß√£o: {init_time:.4f}s")
    print(f"Tamanho da popula√ß√£o: {len(population)}")
    print(f"Melhor fitness: {population[0].fitness:.2f}")
    
    return solver, population

def test_bayesian_optimization(gpu_kernels):
    """Testa otimiza√ß√£o bayesiana usando kernels GPU"""
    print("\nüß™ TESTE DE OTIMIZA√á√ÉO BAYESIANA")
    print("=" * 50)
    
    # Dados sint√©ticos para teste
    sample_size = 1000
    samples = [random.randint(2**70, 2**71-1) for _ in range(sample_size)]
    fitness_values = [random.random() * 1000 for _ in range(sample_size)]
    
    print(f"Tamanho das amostras: {sample_size}")
    
    # Testa infer√™ncia bayesiana
    start_time = time.time()
    posterior = gpu_kernels.batch_bayesian_inference(samples, fitness_values, exploration_factor=0.2)
    inference_time = time.time() - start_time
    
    print(f"Tempo para infer√™ncia bayesiana: {inference_time:.4f}s")
    print(f"Tamanho do posterior: {len(posterior)}")
    
    # Verifica se a soma das probabilidades √© aproximadamente 1.0
    posterior_sum = sum(posterior)
    print(f"Soma das probabilidades: {posterior_sum:.8f}")
    
    # Testa otimiza√ß√£o Monte Carlo
    def dummy_fitness(x):
        # Fun√ß√£o de fitness simples para teste
        return np.sin(x / 10000000000) + random.random() * 0.1
    
    print("\nExecutando otimiza√ß√£o Monte Carlo...")
    start_time = time.time()
    optimal_samples = gpu_kernels.monte_carlo_optimization(
        dummy_fitness, 
        samples, 
        num_samples=50, 
        temperature=1.0
    )
    mc_time = time.time() - start_time
    
    print(f"Tempo para otimiza√ß√£o Monte Carlo: {mc_time:.4f}s")
    print(f"N√∫mero de amostras otimizadas: {len(optimal_samples)}")
    
    return posterior, optimal_samples

def test_end_to_end_evolution(solver, initial_population, generations=3):
    """Testa evolu√ß√£o completa com kernels GPU"""
    print("\nüß™ TESTE DE EVOLU√á√ÉO COMPLETA")
    print("=" * 50)
    
    population = initial_population
    
    for gen in range(generations):
        print(f"\nGera√ß√£o {gen+1}/{generations}")
        
        start_time = time.time()
        population = solver.evolve_generation(population)
        gen_time = time.time() - start_time
        
        print(f"Tempo para evolu√ß√£o: {gen_time:.4f}s")
        print(f"Melhor fitness: {population[0].fitness:.2f}")
        print(f"Pior fitness: {population[-1].fitness:.2f}")
        
        # Diversidade populacional
        diversity = solver._calculate_population_diversity(population)
        print(f"Diversidade da popula√ß√£o: {diversity:.4f}")
    
    return population

def run_integration_tests(args):
    """Executa todos os testes de integra√ß√£o"""
    print("\nüöÄ TESTE DE INTEGRA√á√ÉO COMPLETO GPU KERNELS + GENETIC SOLVER")
    print("=" * 60)
    print(f"Data/Hora: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Configura√ß√µes de teste
    population_size = args.population_size
    generations = args.generations
    
    # Executa testes em sequ√™ncia
    env_detector = test_environment_settings()
    gpu_kernels = test_gpu_kernels_integration(env_detector)
    solver, population = test_genetic_solver_with_gpu(env_detector, population_size)
    
    if gpu_kernels.has_gpu and gpu_kernels.accelerated_modules_loaded:
        posterior, optimal_samples = test_bayesian_optimization(gpu_kernels)
    
    if generations > 0:
        final_population = test_end_to_end_evolution(solver, population, generations)
    
    print("\n‚úÖ TESTES DE INTEGRA√á√ÉO CONCLU√çDOS")
    print("=" * 60)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Teste de integra√ß√£o dos kernels GPU")
    parser.add_argument('--population', dest='population_size', type=int, default=100,
                       help='Tamanho da popula√ß√£o para teste (padr√£o: 100)')
    parser.add_argument('--generations', type=int, default=2,
                       help='N√∫mero de gera√ß√µes para testar (padr√£o: 2)')
    args = parser.parse_args()
    
    run_integration_tests(args)
